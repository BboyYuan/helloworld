知识点:
.变量声明,定义 	--(参考 例题1 , 例题2)
.判断 	--(参考 例题1 , 例题2)
.循环, 在循环中 修改 sql语句	--(参考 例题1 , 例题2)
.查表并 修改 变量 	--(参考 例题1 , 例题2)
.字符串拼接 		--(参考 例题3 )


例题1:

DELIMITER $$

USE `test`$$

DROP PROCEDURE IF EXISTS `hbb`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `hbb`()

    BEGIN
	DECLARE v_total_ability INT DEFAULT 0;
	DECLARE v_id LONG DEFAULT 128849018880;
	DECLARE v_low INT DEFAULT 0;
	DECLARE v_max_low INT DEFAULT 0;
	
	SELECT COUNT(*) INTO v_max_low FROM player;

	WHILE v_low<v_max_low DO
		#取出id 和 total_ability
		SELECT `id`,`total_ability` INTO v_id ,v_total_ability FROM player WHERE `isrobot` = 0  LIMIT v_low ,1;
		
		#将total_ability 的数据更新到 xx表中
		UPDATE  role SET `total_ability` = v_total_ability WHERE id = v_id;
		SET v_low = v_low +1;
		
	END WHILE;
	
	
    END$$

DELIMITER ;




例题2:

DELIMITER $$

USE `test`$$

DROP PROCEDURE IF EXISTS `hbb`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `hbb`()
BEGIN
	DECLARE v_total_ability INT DEFAULT 0;
	DECLARE v_id LONG DEFAULT 128849018880;
	DECLARE v_low INT DEFAULT 0;
	DECLARE v_max_low INT DEFAULT 0;
	SET @v_low = 0;
	SELECT COUNT(*) INTO @v_max_low FROM player;
	
	SET @SqlCmd = 'SELECT `id`,`total_ability` INTO @v_id ,@v_total_ability FROM player WHERE `isrobot` = 0  LIMIT ? ,1'; 
	PREPARE stmt FROM @SqlCmd;
	WHILE @v_low<@v_max_low DO
	
		SET @v_id = 0;
		EXECUTE stmt USING @v_low;
		
		IF @v_id = 0 THEN
			SET @v_id = 0;#无意义的语句,仅仅为了编译通过
		ELSE
			UPDATE  role SET `total_ability` = @v_total_ability WHERE id = @v_id;
		END IF;		
		
		SET @v_low = @v_low +1;
		
	END WHILE;
	
	DEALLOCATE PREPARE stmt;

END$$

DELIMITER ;


例题3:
DELIMITER $$

USE `test`$$

DROP PROCEDURE IF EXISTS `fix_pwd`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `fix_pwd`()
BEGIN

	DECLARE v_i INT DEFAULT 0;
	DECLARE v_max INT DEFAULT 0;
	DECLARE account_str VARCHAR(100);
	SET @v_i = 61;
	SET @v_max = 63;
	
	SET @SqlCmd = 'UPDATE `account` SET `password`="123456" WHERE `username`= ?;'; 
	PREPARE stmt FROM @SqlCmd;
		
	WHILE @v_i<@v_max DO
	
		SET @account_str= CONCAT( 'IAF' , @v_i );
		EXECUTE stmt USING @account_str;
		SET @v_i = @v_i +1;
		
	END WHILE;
	
	DEALLOCATE PREPARE stmt;

END$$

DELIMITER ;


