
DELIMITER $$

USE `test`$$

DROP PROCEDURE IF EXISTS `hbb`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `hbb`()

    BEGIN
	DECLARE v_total_ability INT DEFAULT 0;
	DECLARE v_id LONG DEFAULT 128849018880;
	DECLARE v_low INT DEFAULT 0;
	DECLARE v_max_low INT DEFAULT 0;
	
	SELECT COUNT(*) INTO v_max_low FROM player;

	WHILE v_low<v_max_low DO
		#取出id 和 total_ability
		SELECT `id`,`total_ability` INTO v_id ,v_total_ability FROM player WHERE `isrobot` = 0  LIMIT v_low ,1;
		
		#将total_ability 的数据更新到 xx表中
		UPDATE  role SET `total_ability` = v_total_ability WHERE id = v_id;
		SET v_low = v_low +1;
		
	END WHILE;
	
	
    END$$

DELIMITER ;




方法二:

DELIMITER $$

USE `test`$$

DROP PROCEDURE IF EXISTS `hbb`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `hbb`()
BEGIN
	DECLARE v_total_ability INT DEFAULT 0;
	DECLARE v_id LONG DEFAULT 128849018880;
	DECLARE v_low INT DEFAULT 0;
	DECLARE v_max_low INT DEFAULT 0;
	SET @v_low = 0;
	SELECT COUNT(*) INTO @v_max_low FROM player;
	
	SET @SqlCmd = 'SELECT `id`,`total_ability` INTO @v_id ,@v_total_ability FROM player WHERE `isrobot` = 0  LIMIT ? ,1'; 
	PREPARE stmt FROM @SqlCmd;
	WHILE @v_low<@v_max_low DO
	
		EXECUTE stmt USING @v_low; 
		UPDATE  role SET `total_ability` = @v_total_ability WHERE id = @v_id;
		SET @v_low = @v_low +1;
		
	END WHILE;
	
	DEALLOCATE PREPARE stmt;

END$$

DELIMITER ;






