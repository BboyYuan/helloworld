


void test_fun()
{
	std::vector<int > vec_s;
	std::map<int , int> map_;
	const int max_ = 10;
	for(int i = 0 ; i < max_ ; ++i){
		map_[i] = i;
		vec_s.push_back(i);
	}

	const int test_num = 2000000;
	auto now_t = time(NULL);
	int time_vec_2 , time_map_2 , time_vec_each;

	for(int i = 0 ; i < test_num; ++i){
		int num = rand()%max_;
		auto it_ =  map_.find(num);
		if(it_ != map_.end() ){
			int b = it_->second;
			if(b != num){
				int c =0;
			}
		}
	}
	time_map_2 = time(NULL) -now_t ;


	now_t = time(NULL);
	for(int i = 0 ; i < test_num ; ++i){
		int num = rand()%max_;
		for(int j = 0 ; j < vec_s.size() ; ++j){
			int b = vec_s[j];
			if(b == num){
				break;
			}
		}
	}
	time_vec_each = time(NULL) -now_t ;


	now_t = time(NULL);
	for(int i = 0 ; i < test_num ; ++i){
		int num = rand()%max_;
		auto it_ =  std::lower_bound(vec_s.begin() , vec_s.end() , num);
		if(it_ !=  vec_s.end() ){
			int b = *it_;
			if(b != num){
				int c =0;
			}
		}
	}
	time_vec_2 = time(NULL) -now_t ;

	std::cout<<"容器大小:"<<max_<<"\t 测试次数:"<<test_num<<std::endl;
	std::cout<<"数组二分查找:"<<time_vec_2<<"秒"<<std::endl;
	std::cout<<"数值遍历查找:"<<time_vec_each<<"秒"<<std::endl;
	std::cout<<"map容器查找:"<<time_map_2<<"秒"<<std::endl;

}

//测试结果
容器大小:10      测试次数:2000000

数组二分查找: 12 秒
数值遍历查找: 1  秒
map容器查找:  11 秒

总结:在某些时候,遍历也是不错的选择.(简单靠谱)


