
#include <stdio.h>
#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <memory>
#include <vector>
#include <windows.h>


//排序
#pragma region 

struct IntAndInt
{
	IntAndInt()
	{
		key = 0;
		value =0;
	}
	int key;
	int value;
};

static inline bool _IntAndInt_DownByValue(const IntAndInt & oLeft, const IntAndInt & oRight) 
{
	return oLeft.value > oRight.value;
}

std::vector< IntAndInt  > g_vec_id_and_ability;


void FirstAddRankList(int value_ , const int key_)
{
	IntAndInt t_IntAndInt_;
	t_IntAndInt_.value = value_;
	t_IntAndInt_.key = key_;
	std::vector<IntAndInt>::iterator it = std::upper_bound(g_vec_id_and_ability.begin() , g_vec_id_and_ability.end() , t_IntAndInt_,_IntAndInt_DownByValue  );
	g_vec_id_and_ability.insert(it , t_IntAndInt_);
}

int FindPosFromRankList(int value_  )
{
	IntAndInt IntAndInt_;
	IntAndInt_.value = value_;

	std::vector<IntAndInt>::iterator find_it = std::lower_bound(g_vec_id_and_ability.begin() , g_vec_id_and_ability.end() , IntAndInt_,_IntAndInt_DownByValue  );
	return find_it - g_vec_id_and_ability.begin();
}

int FindPosFromRankList(int value_ , const int key_)
{
	IntAndInt IntAndInt_;
	IntAndInt_.value = value_;

	std::vector<IntAndInt>::iterator find_it = std::lower_bound(g_vec_id_and_ability.begin() , g_vec_id_and_ability.end() , IntAndInt_,_IntAndInt_DownByValue  );
	std::vector<IntAndInt>::iterator temp_it = find_it;
	std::vector<IntAndInt>::iterator end_it = g_vec_id_and_ability.end();
	for(; temp_it != end_it; ++temp_it ){
		if(temp_it->key == key_){
			return temp_it - g_vec_id_and_ability.begin();
		}
	}

	end_it = find_it;
	for(temp_it = g_vec_id_and_ability.begin() ; temp_it != end_it ; ++temp_it){
		if(temp_it->key == key_){
			return temp_it - g_vec_id_and_ability.begin();
		}
	}
	return -1;
}

void UpdateVecByEraseAndInsert(int old_value_ ,int new_value_, const int key_)
{
	int pos_ =  FindPosFromRankList(old_value_ , key_);
	if( (size_t)pos_ < g_vec_id_and_ability.size() ){
		g_vec_id_and_ability.erase(g_vec_id_and_ability.begin() + pos_);
	}

	IntAndInt t_IntAndInt_;
	t_IntAndInt_.key = key_;
	t_IntAndInt_.value = new_value_;
	g_vec_id_and_ability.insert(std::upper_bound(g_vec_id_and_ability.begin(),g_vec_id_and_ability.end(),t_IntAndInt_ ,_IntAndInt_DownByValue ), t_IntAndInt_ );
}

void UpdateVecBySort(int old_value_ ,int new_value_, const int key_)
{
	int pos_ =  FindPosFromRankList(old_value_ , key_);
	bool is_find = false;
	if( (size_t)pos_ < g_vec_id_and_ability.size() ){
		g_vec_id_and_ability[pos_].value = new_value_;
		is_find = true;
	}

	if(is_find == false){
		IntAndInt t_IntAndInt_;
		t_IntAndInt_.key = key_;
		t_IntAndInt_.value = new_value_;
		g_vec_id_and_ability.push_back(t_IntAndInt_);
	}
	std::sort(g_vec_id_and_ability.begin(),g_vec_id_and_ability.end(), _IntAndInt_DownByValue);
}

void UpdateVecByMove(int old_value_ ,int new_value_, const int key_)
{
	int pos_ = FindPosFromRankList(old_value_ , key_);
	if( (size_t)pos_ >= g_vec_id_and_ability.size() ){
		//不存在
		FirstAddRankList(new_value_ , key_);
	}
	else{
		int now_pos_ = pos_;
		int new_pos_ = FindPosFromRankList(new_value_ );
		
		if(now_pos_ < new_pos_){
			--new_pos_;//位置向容器末尾移动时,new_pos_ 多计算了自己,故要减去
		}		
		
		//确保索引有效
		if( (size_t)new_pos_ >= g_vec_id_and_ability.size()){
			return;
		}

		if(now_pos_ == new_pos_){
			g_vec_id_and_ability[now_pos_].value = new_value_;
			return;
		}
		else if(now_pos_ < new_pos_){
			int must_move_buff_len = new_pos_ - now_pos_;
			IntAndInt IntAndInt_ = g_vec_id_and_ability[now_pos_];
			IntAndInt_.value = new_value_;

			IntAndInt * begin_ptr = &(g_vec_id_and_ability[now_pos_]);
			memmove((char*)begin_ptr  ,(char*)(begin_ptr +1) , sizeof(IntAndInt)*must_move_buff_len  );
			g_vec_id_and_ability[new_pos_] = IntAndInt_;
		}
		else{
			int must_move_buff_len =  now_pos_ - new_pos_;
			IntAndInt IntAndInt_ = g_vec_id_and_ability[now_pos_];
			IntAndInt_.value = new_value_;

			IntAndInt * begin_ptr = &(g_vec_id_and_ability[new_pos_]);
			memmove( (char*)(begin_ptr +1) ,(char*)begin_ptr , sizeof(IntAndInt)*must_move_buff_len  );
			g_vec_id_and_ability[new_pos_] = IntAndInt_;
		}
	}
}

void test_fun1()
{
	const int test_times = 1000;
	const int test_vector_size = 100000;
	const int dest_key = 9000;
	const int rand_range = 100000;
	int last_value = 0;
	g_vec_id_and_ability.reserve(test_vector_size + 1);
	for ( int i = 0; i < test_vector_size ; ++i ){

		// hero battle ability
		int nBattleAbility = rand() %rand_range;
		if(i == dest_key){
			last_value = nBattleAbility;
		}
		IntAndInt t_pair;
		t_pair.key = i;
		t_pair.value = nBattleAbility;
		g_vec_id_and_ability.push_back(t_pair);
	}

	std::sort(g_vec_id_and_ability.begin() , g_vec_id_and_ability.end() , _IntAndInt_DownByValue );

	std::cout<<"容器大小:"<<test_vector_size<<std::endl;
	std::cout<<"运行次数:"<<test_times<<std::endl;

	{
		unsigned long begin_t = GetTickCount();
		for(int i = 0 ; i < test_times ; ++i){
			int nBattleAbility = rand() %rand_range;
			UpdateVecBySort(last_value ,nBattleAbility, dest_key);
			last_value = nBattleAbility;
		}
		int n1 = (int)(GetTickCount() - begin_t);
		std::cout<<"UpdateVecBySort diff:"<<n1<<"ms"<<std::endl;
	}

	{
		unsigned long begin_t = GetTickCount();
		for(int i = 0 ; i < test_times ; ++i){
			int nBattleAbility = rand() %rand_range;
			UpdateVecByMove(last_value ,nBattleAbility, dest_key );
			last_value = nBattleAbility;
		}
		int n1 = (int)(GetTickCount() - begin_t);
		std::cout<<"UpdateVecByMove diff:"<<n1<<"ms"<<std::endl;
	}

	{
		unsigned long begin_t = GetTickCount();
		for(int i = 0 ; i < test_times ; ++i){
			int nBattleAbility = rand() %rand_range;
			UpdateVecByEraseAndInsert(last_value ,nBattleAbility, dest_key);
			last_value = nBattleAbility;
		}
		int n1 = (int)(GetTickCount() - begin_t);
		std::cout<<"UpdateVecByEraseAndInsert diff:"<<n1<<"ms"<<std::endl;
	}
}

#pragma endregion


int _tmain( )
{
	test_fun1();
	system("pause");
	return 0;
}
